#+TITLE: Doom emacs private configuration
#+PROPERTY: header-args :results output silent :noweb tangle :comments both :mkdirp yes

Running =doom sync= is not required after modifying this file!

Some additional functions/macros to help configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to this file. Emacs searches the =load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press =K= (non-evil users must press =C-c c k=). This will open documentation for it, including demos of how they are used.

Also, =gd= (or =C-c c d=) will jump to their definition and see how they are implemented.

* Literate config
[[https://org-babel.readthedocs.io/en/latest/header-args/][header-args]]:
- =:tangle yes=
This allows me to run =org-babel-tangle= in the org file to generate the el file without having to restart emacs and rely on =org-babel-load-file=

- =:comments both=
This adds all the non-code related text as comments in the tangled file. It also adds comments wrappers with links back to the heading in the original Org mode file.

Resources:
- [[https://www.youtube.com/watch?v=49kBWM3RQQ8&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg][YouTube: Mike Zamansky - Using Emacs]]
- [[https://www.youtube.com/watch?v=d6iY_1aMzeg&list=PLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][YouTube: Uncle Dave - Emacs Tutorial]]
- [[https://www.youtube.com/playlist?list=PLrFss89N5XNw8rTgI2fVhSj9Y62TpphFI][YouTube: Yisrael Dov - Emacs is Great]]
- [[https://github.com/caisah/emacs.dz][Curated list of "nice" config files]]
- [[http://wolfecub.github.io/dotfiles/][Wolfe's Literate Emacs Config]]
- [[https://huytd.github.io/emacs-from-scratch.html][Emacs from scratch]]
- [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][AngryBacon]]
- [[https://to1ne.gitlab.io/literate-dotfiles/][Toon's Literate Dotfiles]]
- https://brainlessdeveloper.com/2017/12/27/making-emacs-work-like-my-vim-setup/

** Debugging

Use =C-u C-M-x= with the point over the function to debug. This puts us into debugging minor mode in which the following bindings are useful

| SPC | Step next      |
| b   | Set breakpoint |
| g   | Go (run)       |
| h   | Goto here      |
| i   | Step into      |
| q   | Quit           |

Setting this gives a backtrace
#+begin_src emacs-lisp :tangle no
  (setq debug-on-error t)
#+end_src

** Detangling
[[https://www.youtube.com/watch?v=BLomb52wjvE][Yisrael Dov - Emacs is Great ep. 11]]

#+begin_src emacs-lisp :export none
  ;; This is a tangled file. Do not make any changes here. All changes should preferably be made in the original Org file.
  ;; - Use `org-babel-tangle-jump-back-to-org' to jump back to it from any code block.
  ;; - Use `org-babel-detangle' to propagate any changes made here back to the original Org mode file.
#+end_src

** Using noweb references
[[https://necromuralist.github.io/posts/org-babel-noweb-ref/][Inserting text from different blocks]], [[https://org-babel.readthedocs.io/en/latest/header-args/#noweb][noweb header-args]]
Occasionally I use noweb references to insert text from one source block in another. I do this when I think it's useful to explain a particular section in more detail but at the same time I don't want to clutter the place where it's used at.

There are two ways I go about it:
1. The first way is to specify =:noweb-ref NAME= in the source block's header-args eg.
   #+begin_example
     #+begin_src emacs-lisp :noweb-ref MY_BLK_NAME
     #+end_src
   #+end_example

2. The other way is by specifying an explicit name for the source block
   #+begin_example
     #+name: MY_BLK_NAME
     #+begin_src emacs-lisp
     #+end_src
   #+end_example

   and it can be used in the same way. However, this has the added advantage of allowing me to create links to it:
   #+begin_example
     [[MY_BLK_NAME][Link to block called MY_BLK_NAME]]
   #+end_example

In both cases, I can then use this in another block like this.
The only thing is that care must be taken to ensure that the noweb reference is on its own line
#+begin_example
  #+begin_src emacs-lisp
    <<MY_BLK_NAME>>
  #+end_src
#+end_example

Also note that using the same name with multiple blocks concatenates them

* General
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Kartik Shenoy")
#+end_src

** Better defaults
#+begin_src emacs-lisp
(setq-default confirm-kill-emacs 'y-or-n-p  ; Confirm before quitting
              vc-follow-symlinks t
              help-window-select t
              x-stretch-cursor   t)
#+end_src

This determines the style of line numbers in effect. If set to
- =nil=: line numbers are disabled.
- ='relative= - relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

#+begin_src emacs-lisp
(setq bookmark-default-file (concat doom-private-dir "bookmarks"))
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. The three important ones are
- =doom-font=
- =doom-variable-pitch-font=
- =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. Generally only two are needed
#+begin_src emacs-lisp
(setq doom-font "Iosevka-10"
      doom-variable-pitch-font "Iosevka-10")
#+end_src

** Themes
There are two ways to load a theme. Both assume the theme is installed and available.
I can either set =doom-theme= or manually load a theme with the =load-theme= function.
#+begin_src emacs-lisp
(setq doom-theme 'doom-solarized-light)
#+end_src

Doom provides a =dooom-load-theme-hook= eg.
#+begin_src emacs-lisp :tangle no
(add-hook! 'doom-load-theme-hook (lambda() (message "Theme loaded")))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(map! :after avy
      :map goto-map
      :desc "avy-goto-line" "M-g" #'avy-goto-line)
#+end_src

=SPC SPC= is too valuable to use to find files in project. Rebind to =switch-buffer= instead
#+begin_src emacs-lisp
(map! :after ivy
      :leader
      :desc "Switch buffer" "SPC" #'+ivy/switch-buffer)
#+end_src

Some generic toggle bindings
#+begin_src emacs-lisp
(map! :map doom-leader-toggle-map
      :desc "Highlight cursorline" "c" #'hl-line-mode)
#+end_src

*** TODO Description is not displayed correctly when using which-key

* counsel/ivy/swiper
#+begin_src emacs-lisp
(map! :after swiper
      :map doom-leader-search-map
      :desc "Search all buffers" "B" #'swiper-all)
#+end_src

* doom-modeline
#+begin_src emacs-lisp
(setq doom-modeline-buffer-encoding nil
      doom-modeline-major-mode-icon t
      doom-modeline-persp-name t)
#+end_src

* evil
The default behavior of evil is to create windows to the left and the top and go there.
However, this makes it seem like it's creating a split but not jumping to it.
The following makes it behave more like vim
#+begin_src emacs-lisp
(after! evil
  (setq evil-vsplit-window-right t
        evil-split-window-below t))
#+end_src

** Keybindings
Move by visual lines
#+begin_src emacs-lisp
(map! :after evil
      :map evil-motion-state-map
      :desc "evil-next-visual-line"     "j"   #'evil-next-visual-line
      :desc "evil-next-line"            "g j" #'evil-next-line
      :desc "evil-previous-visual-line" "k"   #'evil-previous-visual-line
      :desc "evil-previous-line"        "g k" #'evil-previous-line
      :desc "evil-end-of-visual-line"   "$"   #'evil-end-of-visual-line
      :desc "evil-end-of-line"          "g $" #'evil-end-of-line
      :desc "evil-beginning-of-line"    "g 0" #'evil-beginning-of-line)

(after! evil-maps
  (evil-redirect-digit-argument evil-motion-state-map "0" 'evil-beginning-of-visual-line))
#+end_src

#+begin_src emacs-lisp
(map! :after evil
      :map evil-normal-state-map
      :desc "evil-redo" "U" #'evil-redo)
#+end_src

* Org
#+begin_src emacs-lisp
(setq org-directory (file-truename "~/Documents/Notes")
      org-default-notes-file (expand-file-name "Personal/Inbox.org" org-directory))
#+end_src

** Agenda
#+begin_src emacs-lisp
(setq org-agenda-inhibit-startup nil)
#+end_src

Filter out any unwanted files from the notes that I don't want to add to the agenda
#+begin_src emacs-lisp
(require 'seq)
(setq org-agenda-files (seq-filter (lambda (x) (and 'file-exists-p
                                                    (not (string-match-p ".bak" x))
                                                    (not (string-match-p "Work/" x))
                                                    (not (string-match-p "Spanish.org" x))))
                                   (directory-files-recursively org-directory "\\.org$")))
#+end_src

Make agenda start on a Monday. By default, the agenda only shows the next 7 days. I want to see the previous 7 days as well just in case I missed something. Hence, these combined will show entries starting from the previous Monday. [[https://old.reddit.com/r/orgmode/comments/8r70oh/make_orgagenda_show_this_month_and_also_previous/][Source]]
#+name: org-agenda-span
#+begin_src emacs-lisp
(setq org-agenda-start-day "-6d"
      org-agenda-start-on-weekday 1
      org-agenda-span 'month)
#+end_src

Prevent same entry from showing up multiple times
#+begin_src emacs-lisp
(setq org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-timestamp-if-deadline-is-shown t
      org-agenda-skip-additional-timestamps-same-entry t)
#+end_src

Open org-agenda in the only window and remove the fluff
#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window
      org-agenda-show-all-dates nil)
#+end_src

*** Custom commands
These are some helper functions Based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber: An agenda for life with org-mode]]
#+begin_src emacs-lisp
(defun my-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun my-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
#+end_src

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Daily agenda and TODOs"
         (
          <<daily-agenda-cmds>>
          ))))
#+end_src

All the high-priority tasks that are still pending
#+begin_src emacs-lisp :noweb-ref daily-agenda-cmds :tangle no
(tags "PRIORITY=\"A\""
      ((org-agenda-overriding-header "High-priority unfinished tasks:")
       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
#+end_src

An agenda showing the previous week and the next couple of weeks [[org-agenda-span][configured above]]
#+begin_src emacs-lisp :noweb-ref daily-agenda-cmds :tangle no
(agenda "")
#+end_src

All the remaining todos minus the high-priority ones
#+begin_src emacs-lisp :noweb-ref daily-agenda-cmds :tangle no
(alltodo ""
         ((org-agenda-overriding-header "ALL normal priority tasks:")
          (org-agenda-skip-function '(or (my-org-skip-subtree-if-habit)
                                         (my-org-skip-subtree-if-priority ?A)
                                         (org-agenda-skip-if nil '(scheduled deadline))))))
#+end_src

** Appearance
:PROPERTIES:
:END:

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)  ; Hide markers for bold/italics etc.
#+end_src

Prevent DONE org-headlines from being highlighted a different color
#+begin_src emacs-lisp
(after! org
  (setq org-fontify-done-headline nil))
#+end_src

*** Change faces
#+begin_src emacs-lisp
(defun my-update-org-faces-after-load-theme ()
  "Update some org-mode faces for all themes"
  (when (eq major-mode 'org-mode)
    (set-face-attribute 'org-document-info-keyword nil :inherit 'org-meta-line :foreground nil)
    (set-face-attribute 'org-drawer                nil :inherit 'org-meta-line :foreground nil :weight 'bold)
    (set-face-attribute 'org-document-title        nil :height 1.5)
    (set-face-attribute 'org-level-1               nil :height 1.3)
    (set-face-attribute 'org-level-2               nil :height 1.2)
    (set-face-attribute 'org-level-3               nil :height 1.15)
    (set-face-attribute 'org-level-4               nil :height 1.1)
    (set-face-attribute 'org-special-keyword       nil :weight 'bold)
    (set-face-attribute 'org-tag                   nil :height (face-attribute 'default :height) :weight 'bold)
    ;; (cond ((eq doom-theme 'doom-solarized-light) (my-update-org-faces-after-load-doom-solarized-light))
    ;;       (t nil))
    ))
#+end_src

Add a hook to update faces after a theme is loaded. Also call it immediately as theme is loaded before org mode
#+begin_src emacs-lisp
(add-hook 'doom-load-theme-hook 'my-update-org-faces-after-load-theme)
(add-hook 'org-mode-hook 'my-update-org-faces-after-load-theme)
#+end_src

*** Pretty symbols
:PROPERTIES:
:ID:       b3d9e6d2-b197-4a77-b055-5f8e4b0baf37
:END:
- org-superstar default: "◉ ○ ✸ ✿"
- Large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
- Small: ► • ★ ▸
- More symbols here: http://xahlee.info/comp/unicode_punctuation_symbols.html

Use ✿ for levels 1-2, ✸ for level 3-5 and ◉ for levels 6-8
#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '(?✿ ?✿ ?✸ ?✸ ?✸ ?○ ?○ ?○ ?○ ?○))
#+end_src

Replace - and + in plain list with ➤ and ✜ respectively
#+begin_src emacs-lisp
(setq org-superstar-item-bullet-alist '((42 . ?●) (43 . ?✜) (45 . ?➤)))
#+end_src

Prettier priorities
#+begin_src emacs-lisp
(prettify-utils-add-hook org-mode
                         ("[ ]" "☐")
                         ("[x]" "✔")
                         ("[X]" "✔")
                         ("[-]" "❍")
                         (":LOGBOOK:" "☰")
                         (":PROPERTIES:" "⚙")
                         (":END:" "⋯")
                         ("DEADLINE:" "⏰D")
                         ("SCHEDULED:" "⏲S")
                         ("[#A]" "❰P1❱")
                         ("[#B]" "❰P2❱")
                         ("[#C]" "❰P3❱")
                         )
#+end_src

** Babel
Some org-babel [[https://github.com/dfeich/org-babel-examples][recipes]]

#+begin_src emacs-lisp
(after! org
  (setq org-babel-C++-compiler
        (cond ((executable-find "clang++") "clang++")
              ((executable-find "g++") "g++")))

  (setq org-babel-default-header-args
        '((:session . "none") (:results . "verbatim replace") (:noweb . "strip-export")))

  (setq org-babel-default-header-args:C++
        '((:flags . "-std=c++14 -Wall -Wextra -Werror ${BOOST_HOME+-L ${BOOST_HOME}/lib -I ${BOOST_HOME}/include} -L${HOME}/.local/lib -I${HOME}/.local/include -Wl,${BOOST_HOME+-rpath ${BOOST_HOME}/lib}")))

  (setq org-babel-python-command "python3")
  (setq org-babel-default-header-args:python '((:results . "output")))
#+end_src

Delete the result block using =C-c C-v C-k= where =C-c C-v= is the /org-babel-key-prefix/
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "C-c C-v C-k") (kbd "C-c C-v k")))
#+end_src

*** Jump to head/tail of any block, not just src blocks
=org-babel-goto-src-block-head= jumps to the beginning of a source block. This is super useful! Why restrict it only to source blocks?
Repurpose =C-c C-v u= to jump to beginning/end of any block. =C-c C-v C-u= is left untouched to only jump to top of src blocks
#+begin_src emacs-lisp
(after! org
  (defun my-org-babel-goto-block-corner (p)
    "Go to the beginning of the current block.
    If called with a prefix, go to the end of the block"
    (interactive "P")
    (let* ((element (org-element-at-point)))
      (when (or (eq (org-element-type element) 'example-block)
                (eq (org-element-type element) 'src-block) )
        (let ((begin (org-element-property :begin element))
              (end (org-element-property :end element)))
          ;; Ensure point is not on a blank line after the block.
          (beginning-of-line)
          (skip-chars-forward " \r\t\n" end)
          (when (< (point) end)
            (goto-char (if p end begin))
            (when p
              (skip-chars-backward " \r\t\n")
              (beginning-of-line)))))))

  ;; (define-key (org-babel-map) [remap org-babel-goto-src-block-head] 'my-org-babel-goto-block-corner)
  )
#+end_src

** Capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "TODO" entry
         (file org-default-notes-file)
         "* TODO %?\n:LOGBOOK:\n- State \"TODO\"       from              %U\n:END:"
         :jump-to-captured t :empty-lines 1)

        ("r" "Recommendation" item (file "Personal/Recommendations.org") "" :jump-to-captured t)

        ("x" "Misc etc." entry
         (file org-default-notes-file)
         "* %?"
         :jump-to-captured t :empty-lines 1)

        ("s" "Snippets")

        ("se" "Emacs snippets" entry
         (file "Software/emacs.org")
         "* %?"
         :jump-to-captured t :empty-lines 1)

        ("ss" "Shell snippets" entry
         (file "Software/shell.org")
         "* %?"
         :jump-to-captured t :empty-lines 1)

        ("sv" "Vim snippets" entry
         (file "Software/vim.org")
         "* %?"
         :jump-to-captured t :empty-lines 1)))
#+end_src

** ID
Create an ID when storing the link. Curiously this also causes =org-store-link= to store IDs by default
Also note that setting this to true will create an ID for every entry which could become expensive when =org-id-track-globally= is enabled

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive)
#+end_src

** Refile

#+begin_src emacs-lisp
(after! org-refile
#+end_src

Resources:
- [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Aaron Bieber - Organizing Notes with Refile]]

By [[https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/czg008y/][/u/awalker4 on reddit]].
Show upto 5 levels of headings from the current file and 3 levels of headings from all agenda files
#+begin_src emacs-lisp
(setq org-refile-targets
      '((nil . (:maxlevel . 5))
        (org-agenda-files . (:maxlevel . 3))))
#+end_src

Additionally, I'm using a more selective org-refile-targets which is limited based on the current file.
The intent is to set org-refile-targets to the org files at or below the hierarchy of the current file.
A way to do it is by writing a function that sets /org-refile-targets/ in a let binding making it local.
#+begin_src emacs-lisp
(defun my-org-refile-targets (&optional nomod)
  "Refile the current heading to another location.
    The other heading can be in the current file or in a file that resides
    at or anywhere below the directory the current file resides in.
    The intent is to move to a similar file. If I'm in work-related file,
    I almost never have to refile something to a personal file.

    If NOMOD is non-nil then just return org-refile-targets"
  (if nomod
      org-refile-targets
    `((nil . (:maxlevel . 5))
      (,(seq-intersection
         org-agenda-files
         (directory-files-recursively (file-name-directory (buffer-file-name)) "\\.org$"))
       . (:maxlevel . 3)))))

(defun my-org-refile (&optional p)
  "Refile the current heading to another location using a custom
     value of org-refile-targets"
  (interactive "P")
  (let ((org-refile-targets (my-org-refile-targets p)))
    (call-interactively 'org-refile)))

(defun my-org-refile-copy ()
  "Refile the current heading to another location using a custom
     value of org-refile-targets"
  (interactive)
  (let ((org-refile-targets (my-org-refile-targets)))
    (call-interactively 'org-refile-copy)))
#+end_src

#+begin_src emacs-lisp
(map! :map org-mode-map
      :localleader
      :prefix "r"
      :desc "org-refile" "r" #'my-org-refile
      :desc "org-refile-copy" "y" #'my-org-refile-copy
      :prefix "s"
      :desc "org-refile" "r" #'my-org-refile
      :desc "org-refile-copy" "y" #'my-org-refile-copy)
#+end_src

Following are from Aaron Bieber's post [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organizing Notes with Refile]]

Creating new parents - To create new heading, add =/HeadingName= to the end when using refile (=C-c C-w=)
#+begin_src emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+end_src

Store the timestamp when an entry is refiled
#+begin_src emacs-lisp
(setq org-log-refile 'note)
#+end_src

#+begin_src emacs-lisp
)  ; END of (after! org-refile
#+end_src

** Startup
#+begin_src emacs-lisp
(setq org-startup-align-all-tables nil  ; This slows down startup of large org files considerably!
      org-startup-folded t
      org-startup-with-inline-images t
      org-ellipsis " ▼ ")
#+end_src

** Structure
#+begin_src emacs-lisp
(after! org
#+end_src

#+begin_src emacs-lisp
(setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto))
      org-cycle-emulate-tab nil  ; Prevents TAB from, well, inserting a TAB in normal mode
      org-src-window-setup 'current-window)
#+end_src

#+begin_src emacs-lisp
#+end_src

Easy templates for org-version ≥ 9.2. =C-c C-,= was also added in 9.2 and provides a menu to select an easy-template
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("sc" . "src c++"))
(add-to-list 'org-structure-template-alist '("sl" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sp" . "src python"))
(add-to-list 'org-structure-template-alist '("ss" . "src bash"))
#+end_src

#+begin_src emacs-lisp
)
#+end_src

*** TODO Archive trees hierarchically
*** Sparse Trees
#+begin_src emacs-lisp
(setq org-highlight-sparse-tree-matches nil)
#+end_src

** Org TODO
=@=   - Log timestamp and note
=!=   - Log timestamp only
=x/y= - =x= takes affect when entering the state and
      =y= takes affect when exiting if the state being entered doesn't have any logging
Refer [[http://orgmode.org/manual/Tracking-TODO-state-changes.html][Tracking-TODO-state-changes]] for details

Custom keywords. Need to put it in an ~after!~ block to make sure it gets set after the defaults provided by Doom
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence
           "TODO(t!)"     ; A task that needs doing & is ready to do
           "START(s)"     ; A task that is in progress
           "WAIT(w@/!)"   ; Something is holding up work on this task
           "|"
           "DONE(d@/!)"   ; Task successfully completed
           "DEFER(f@/!)"
           "CANCEL(c@)")  ; Task was cancelled, aborted or is no longer applicable
          (sequence
           "[ ](T)"       ; A task that needs doing
           "[-](S)"       ; Task is in progress
           "[?](W)"       ; Task is being held up or paused
           "|"
           "[X](D)")      ; Task was completed
          )))
#+end_src

Change from any todo state to any other state using =C-c C-t KEY=, provided selection keys have been defined
#+begin_src emacs-lisp
(setq org-use-fast-todo-selection 'auto)
#+end_src

Add logging when task state changes
#+begin_src emacs-lisp
(setq org-log-into-drawer t  ; Save state changes into LOGBOOK drawer instead of in the body
      org-log-redeadline 'note
      org-treat-insert-todo-heading-as-state-change t
      org-enforce-todo-dependencies t)  ; Prevent parent task from being marked complete till all child TODOS are marked as complete
#+end_src

Setting this to nil allows a convenient way to select a TODO state and bypass any logging associated with that.
#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

#+begin_src emacs-lisp :tangle no
(after! org
  (setq org-todo-keyword-faces
        '(("[-]"    . +org-todo-active)
          ("STRT"   . +org-todo-active)
          ("[?]"    . +org-todo-onhold)
          ("WAIT"   . +org-todo-onhold)
          ("NO"     . +org-todo-cancel)
          ("CANCEL" . +org-todo-cancel))))
#+end_src

*** Priorities
#+begin_src emacs-lisp
(setq org-highest-priority ?A
      org-lowest-priority ?D
      org-default-priority ?D)
#+end_src

**** TODO COMMENT Set custom priority faces
Need to put this in an ~after!~ block to make sure it gets set after the defaults provided by Doom
#+begin_src emacs-lisp
;; (defun my-update-org-priority-faces ()
;;   "Set org-priority-faces according to the theme"
(setq org-priority-faces `((?A . (:height (face-attribute 'default :height) :foreground (face-attribute 'error   :foreground)))
                             (?B . (:height (face-attribute 'default :height) :foreground (face-attribute 'warning :foreground)))
                             (?C . (:height (face-attribute 'default :height) :foreground (face-attribute 'success :foreground)))))
;; (add-hook 'doom-load-theme-hook 'my-update-org-priority-faces)
;; (add-hook 'org-mode-hook 'my-update-org-priority-faces)
#+end_src

More customization in [[id:b3d9e6d2-b197-4a77-b055-5f8e4b0baf37][Pretty symbols]]

*** Inline Tasks
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-inlinetask)
#+end_src

** Keybindings
Use =org-goto= instead of =semantic-or-imenu= when in org files
#+begin_src emacs-lisp
(after! (counsel org)
  (defun my-org-goto-or-semantic-or-imenu ()
    "Use mode-specific commands if available else fallback to counsel-semantic-or-imenu"
    (interactive)
    (if (string= major-mode "org-mode")
        (counsel-org-goto)
      (counsel-semantic-or-imenu))))

(map! :after (counsel org)
      :map doom-leader-search-map
      :desc "org-goto-or-semantic-or-imenu" "i" #'my-org-goto-or-semantic-or-imenu)
#+end_src

* rcirc
#+begin_src emacs-lisp
(setq rcirc-fill-column 'window-text-width
      rcirc-kill-channel-buffers t
      rcirc-prompt "%t> "
      rcirc-server-alist '(("irc.freenode.net" :channels ("#emacs" "#vim")))
      rcirc-time-format "[%H:%M] ")
#+end_src

* workspaces (using persp-mode)
#+begin_src emacs-lisp
(map! :after persp-mode
      :map doom-leader-workspace-map
      :desc "Swap Left"               "{"   #'+workspace/swap-left
      :desc "Swap Right"              "}"   #'+workspace/swap-right
      :desc "Add buffer"              "b a" #'persp-add-buffer
      :desc "Add buffers by Regex"    "b A" #'persp-add-buffers-by-regexp
      :desc "Remove buffer"           "b r" #'persp-remove-buffer
      :desc "Remove buffers by Regex" "b R" #'persp-remove-buffers-by-regexp)
#+end_src

** TODO COMMENT Automatically create new workspace when opening IRC buffers
#+begin_src emacs-lisp
(after! persp-mode
        (persp-def-auto-persp "IRC"
          :parameters '((dont-save-to-file . t))
          :mode 'rcirc-mode
          :dyn-env '(after-switch-to-buffer-functions ;; prevent recursion
                     (persp-add-buffer-on-find-file nil)
                     persp-add-buffer-on-after-change-major-mode)
          :hooks '(after-switch-to-buffer-functions)
          :switch 'window))
#+end_src

* local settings
There's a bug in org-mode tangling logic which deletes any old versions of the files while tangling ([[https://github.com/hlissner/doom-emacs/issues/3867#issuecomment-686300907][reference]])
The solution suggested in the link didn't work for me so instead I dump any local settings to a separate file and load that

WSL:
#+begin_src emacs-lisp :tangle (if (and (eq system-type 'gnu/linux) (string-match-p "microsoft" (shell-command-to-string "uname -r"))) "config_local.el" "no")
(defun browse-url-xdg-open-wsl (url &optional ignored)
  (interactive (browse-url-interactive-arg "URL: "))
  (shell-command-to-string (concat "explorer.exe " url)))
(advice-add #'browse-url-xdg-open :override #'browse-url-xdg-open-wsl)
#+end_src

Work:
#+begin_src emacs-lisp :tangle (if (string-match-p "atletx" system-name) "config_local.el" "no")
(load (expand-file-name "~/.config/dotfiles-priv/emacs/work.el") t)
#+end_src

#+begin_src emacs-lisp
(load (concat doom-private-dir "config_local.el"))
#+end_src
