#+TITLE: git configuration
#+PROPERTY: header-args+ :results output silent :noweb tangle :comments both :mkdirp yes
#+TODO: FIXME | FIXED

* config
:PROPERTIES:
:header-args+: :tangle config
:END:
#+begin_src conf :export none
  # This is a tangled file. Do not make any changes here. All changes should preferably be made in the original Org file.
  # Use =org-babel-tangle-jump-back-to-org= to jump back to it from any code block.
  # If any changes are made here, use =org-babel-detangle= to add it back to the original Org mode file.
#+end_src

https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
https://git-scm.com/docs/git-config.html

- =git config --show-origin --list= shows all settings in effect as well as where they were set from
- =git config --show-origin <section>.<setting>= shows information about a specific setting

** user
#+begin_src conf
  [user]
  name  = Kartik Shenoy
  email = theresmorethanoneway@gmail.com
#+end_src

** core
#+begin_src conf
  [core]
  editor   = gvim --nofork
  fileMode = false
#+end_src

I'm using the default value of =excludesfile= so this is not required. I have it here simply for documenting it
It was generated at https://www.gitignore.io/api/c,c++,dropbox,emacs,vim,tags
#+begin_src conf :tangle no
  excludesfile = ~/.config/git/ignore
#+end_src

Centralize all hooks instead of configuring them on a per-repository basis
#+begin_src conf
  hooksPath = ~/.config/git/hooks/
#+end_src

** color
#+begin_src conf
  [color]
  ui     = auto
  branch = auto
  diff   = auto
  status = auto

  [color "branch"]
  current = green
  remote  = red

  [color "diff"]
  meta = yellow
  frag = magenta
  old = red bold
  new = green
  plain = white

  [color "status"]
  added = yellow
  changed = red
  untracked = cyan
#+end_src

** diff
#+begin_src conf
  [diff]
  tool = gvim

  [difftool]
  prompt = false

  [difftool "gvim"]
  cmd = gvim -df -c 'set columns=260|set lines=62|wincmd =' $LOCAL $REMOTE 2> /dev/null
  trustExitCode = true

  [difftool "vim"]
  cmd = vim -df -c 'set columns=260|set lines=62|wincmd =' $LOCAL $REMOTE 2> /dev/null
  trustExitCode = true

  [difftool "meld"]
  cmd = meld --diff $LOCAL $REMOTE
#+end_src

** merge
#+begin_src conf
  [merge]
  tool = gvim
  conflictstyle = diff3

  [mergetool "meld"]
  cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $MERGED $REMOTE

  [mergetool "gvim"]
  cmd = vim_merge $BASE $REMOTE $LOCAL $MERGED
  trustExitCode = true
#+end_src

** misc
#+begin_src conf
  [credential]
  helper = cache --timeout=3600

  [push]
  default = matching
#+end_src

** aliases
- https://gitlab.com/to1ne/literate-dotfiles/blob/master/git.org
- https://haacked.com/archive/2014/07/28/github-flow-aliases/

Using =!= as prefix allows running any command in the shell and it doesn't have to be a git command.
Thus, if we want to create an alias to run multiple commands by chaining them together, we have to use =!=
#+begin_src conf
  [alias]
  alias = !git config -l | grep alias | cut -c 7-
#+end_src

Open gitconfig file with my default editor
#+begin_src conf
  ec = config --global -e
#+end_src

#+begin_src conf
  d  = diff
  dw = diff --word-diff
  dt = difftool
  mt = mergetool
  cl = clone
  ci = commit
  co = checkout
  br = branch -a
#+end_src

Aliases for deleting the branch from various places
#+begin_src conf
  br-rm-remote = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git push origin :$branch; }; f"
  br-rm-local  = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git branch -D $branch; }; f"
  br-rm-all    = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git push origin :$branch; git branch -D $branch; }; f"
#+end_src

This scrubs away all local branches that are merged.
#+begin_src conf
  br-scrub = !git branch --merged | egrep -v '(^\\*|master)' | xargs git branch -d
#+end_src

#+begin_src conf
  lg = log --color --graph --pretty=format:' %C(yellow)%h%C(reset) %s %C(green)(%cr) %C(bold blue)<%an>%C(red)%d%C(reset)' --abbrev-commit --all
  ls = log --color --graph --pretty=format:' %C(yellow)%h%C(reset) %s %C(red)%d%C(reset)' --abbrev-commit --all
#+end_src

Pull changes from the remote. Any local commits will be rebased to come after the commits from remote. =--prune= option removes remote-tracking branches that no longer exist on the remote.
#+begin_src conf
  sync = !git pull --rebase --prune && git submodule update --init --recursive
#+end_src

Safer wipes. Using =git reset HEAD --hard= leaves no room for undoing anything.
This commits everything and then does a hard reset to remove that commit. The nice thing is, the commit is still there, but it’s just unreachable. Unreachable commits are a bit inconvenient to restore, but at least they are still there.
I can run the =git reflog= command and find the SHA of the commit if I realize later that I made a mistake with the reset. The commit message will be “WIPE SAVEPOINT” in this case.
#+begin_src conf
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
#+end_src

* Local variables
:PROPERTIES:
:header-args: :export none :tangle no
:END:
Use =add-file-local-variable= or =add-file-local-variable-prop-line= instead of adding these manually

# [[https://www.reddit.com/r/emacs/comments/372nxd/how_to_move_init_to_orgbabel/crjicdv/][Auto-tangle on save]]

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# org-enforce-todo-checkbox-dependencies: nil
# org-enforce-todo-dependencies: nil
# org-refile-targets: ((nil :maxlevel . 9))
# End:
