{
    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    //==================================================================================================================
    // Namespaces
    //==================================================================================================================
    "namespace": {
        "prefix": "ns",
        "description": "namespace { ... }",
        "body": [
            "namespace ${1:nCh }{",
            "  $0",
            "} // END $1namespace",
        ],
    },
    "using namespace": {
        "prefix": "uns",
        "description": "using namespace ...",
        "body": "using namespace ${1:std};",
    },
    //==================================================================================================================
    // Loops
    //==================================================================================================================
    "Ranged for": {
        "prefix": "for",
        "description": "Ranged for",
        "body": [
            "for (auto ${1:i}: ${2:v}) {",
            "  $TM_SELECTED_TEXT$0",
            "}",
        ],
    },
    "C-style for": {
        "prefix": "fori",
        "description": "C-style for",
        "body": [
            "for (auto ${1:i} = 0; $1 < ${2:limit}; $1++) {",
            "  $TM_SELECTED_TEXT$0",
            "}",
        ],
    },
    //==================================================================================================================
    // Templates
    //==================================================================================================================
    "template": {
        "prefix": "tp",
        "description": "template",
        "body": "template <typename ${1:T}",
    },
    //==================================================================================================================
    // Smart pointers
    //==================================================================================================================
    "boost::shared_ptr<>": {
        "prefix": "bsp",
        "description": "boost::shared_ptr<...>",
        "body": "boost::shared_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    "boost::make_shared<>": {
        "prefix": "bms",
        "description": "boost::make_shared<...>",
        "body": "boost::make_shared<${1:$TM_SELECTED_TEXT}>",
    },
    "boost::unique_ptr<>": {
        "prefix": "bup",
        "description": "boost::unique_ptr<...>",
        "body": "boost::unique_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    "boost::weak_ptr<>": {
        "prefix": "bsp",
        "description": "boost::weak_ptr<...>",
        "body": "boost::weak_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    "std::shared_ptr<>": {
        "prefix": "ssp",
        "description": "std::shared_ptr<...>",
        "body": "std::shared_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    "shared::make_shared<>": {
        "prefix": "sms",
        "description": "shared::make_shared<...>",
        "body": "shared::make_shared<${1:$TM_SELECTED_TEXT}>",
    },
    "std::unique_ptr<>": {
        "prefix": "sup",
        "description": "std::unique_ptr<...>",
        "body": "std::unique_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    "std::weak_ptr<>": {
        "prefix": "ssp",
        "description": "std::weak_ptr<...>",
        "body": "std::weak_ptr<${1:$TM_SELECTED_TEXT}>",
    },
    //==================================================================================================================
    // std library
    //==================================================================================================================
    "std::copy": {
        "prefix": "cp",
        "body": "std::copy(begin(${1:src}), end($1), std::back_inserter(${2:dst}));",
        "description": "std::copy",
    },
    //==================================================================================================================
    // Misc
    //==================================================================================================================
    "cout debug": {
        "prefix": "dbg",
        "body": "std::cout << \"DEBUG: \" << \" (\" << __FILE__ << \':\' << std::dec << __LINE__ << \")\\n\";",
        "description": "cout debug print",
    },
}