#+TITLE: tmux configuration
#+PROPERTY: header-args+ :results output silent :noweb tangle :comments both :mkdirp yes
#+TODO: FIXME | FIXED

* Resources
- https://thevaluable.dev/tmux-boost-productivity-terminal/

* tmux++
:PROPERTIES:
:header-args+: :tangle tmuxw.bash
:END:

Wrapper around tmux to add more functionality. This file must be sourced
#+begin_src bash
#!/usr/bin/env bash
#+end_src

Wrapper around the tmux command
#+begin_src bash
tmux::exe() {
    LANG=en_US.UTF-8 TMUX_DEFAULT_OPTS="$TMUX_DEFAULT_OPTS ${TMUX_DEFAULT_SOCKET:+-L $TMUX_DEFAULT_SOCKET}" command tmux "$@"
}
#+end_src

Attach to existing session or else create a new one
#+begin_src bash
tmux::attach_or_new() {
    if [[ ! -z "$TMUX" ]]; then return; fi

    if [[ -z "$1" ]]; then
        tmux::exe -2 attach-session || tmux::exe -2 new-session
    else
        # This doesn't work when the supplied argument is a subset of an already existing session name
        # For eg. if we have a session called DebugBus, and we check if the session "Debug" exists, tmux returns true
        # tmux -2 attach-session -t "$@" || ( echo "Creating new session..." && tmux -2 new-session -s "$@" )

        if [[ $(tm ls | grep -P "^$1\b" 2> /dev/null) ]]; then
            #echo "Attaching to exising session..."
            tmux::exe -2 attach-session -t "$@"
        else
            echo "Creating new session $1 ..."
            tmux::exe -2 new-session -s "$1"
        fi
    fi
}
#+end_src


Update environment variables in TMUX. From https://raim.codingfarm.de/blog/2013/01/30/tmux-update-environment/
#+begin_src bash
tmux::update_env() {
    echo "Updating to latest tmux environment...";

    local _line;
    while read _line; do
        if [[ $_line == -* ]]; then
            unset ${_line/#-/}
        else
            _line=${_line/=/=\"}
            _line=${_line/%/\"}
            eval export $_line;
        fi;
    done < <(tmux show-environment)

    echo "...done"
}
#+end_src

Helper functions to simplify sending keys
#+begin_src bash
tmux::send_keys_other_panes() {
    local _pane_current=$(tmux display-message -p '#P')
    for _pane in $(tmux list-panes -F '#P'); do
        if (( "$_pane" != "$_pane_current" )); then
            tmux::exe send-keys -t ${_pane} "$@"
        fi
    done
}

tmux::send_keys_all_panes() {
    for _pane in $(tmux list-panes -F '#P'); do
        tmux::exe send-keys -t ${_pane} "$@"
    done
}

tmux::send_keys_all() {
    for _window in $(tmux list-windows -F '#I'); do
        for _pane in $(tmux list-panes -t ${_window} -F '#P'); do
            tmux::exe send-keys -t ${_window}.${_pane} "$@"
        done
    done
}
#+end_src

Custom layout for work
#+begin_src bash
tmux::_select_layout_work() {
    local num_panes=$(tmux::exe display-message -p "#{window_panes}")
    local win_width=$(tmux::exe display-message -p "#{window_width}")
    local win_width_by2=$(( $win_width / 2 ))
    local win_width_by4=$(( $win_width / 4 ))
    local win_height=$(tmux::exe display-message -p "#{window_height}")
    local win_height_by2=$(( $win_height / 2 ))

    local curr_pane=$(tmux::exe display-message -p "#{pane_index}")
    local curr_path=$(tmux::exe display-message -p "#{pane_current_path}")
    for (( i = $num_panes; i < 3; i++ )); do
        tmux::exe split-window -h -c "$curr_path"
    done

    if [[ "$1" == "work-max" ]]; then
        tmux::exe select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
        tmuxw resize-pane -t 2 -x 100% > /dev/null
        tmuxw resize-pane -t 1 -x 50% > /dev/null
    elif [[ "$1" == "work-home" ]]; then
        tmux::exe select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
        tmuxw resize-pane -t 1 -x 25% > /dev/null
        tmuxw resize-pane -t 2 -x 50% > /dev/null
    elif [[ "$1" == "work-pc" ]]; then
        tmux::exe select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
        tmuxw resize-pane -t 1 -x 50% > /dev/null
        tmuxw resize-pane -t 2 -x 25% > /dev/null
    elif [[ "$1" == "work-lp" ]]; then
        tmux::exe select-layout "96ed,319x66,0,0{159x66,0,0,0,159x66,160,0[159x32,160,0,1,159x33,160,33,90]}"
        tmuxw resize-pane -t 1 -x 50% > /dev/null
        tmuxw resize-pane -t 2 -y 50% > /dev/null
    fi

    tmux::exe select-pane -t $curr_pane
}
#+end_src

Helper function to name a pane
#+begin_src bash
tmux::_rename_pane() {
    local _name
    if [[ -n "$1" ]]; then
        _name="$1"
    else
        read -p "Enter Pane Name: " _name;
    fi
    printf "\033]2;%s\033\\r:r" "${_name}";

    if [[ $(tmux display-message -p "#{pane-border-status}") == "off" ]]; then
        tmux setw -g pane-border-status top
    fi
}
#+end_src

Top-level wrapper function
#+begin_src bash
tmuxw() {
    if (( $# == 0 )); then
        tmux::exe
        return
    fi

    local cmd=$1; shift;

    case $cmd in
        attach-new|an)
            # if (( $(tmux::exe -V) < 2.3 )); then
            tmux::attach_or_new "$@"
            # else
            # tmux::exe new-session -A -s "$@"
            # fi
            ;;

        msg)
            tmux::exe display-message "$@"
            ;;

        resize-p*|resizep)
            # From https://github.com/tmux/tmux/issues/888#issuecomment-297637138
            if [[ "$*" =~ -[xy][[:space:]]+[[:digit:]]+% ]]; then
                local perVal=$(sed -e 's/^.*-[xy]\s*//' -e 's/%.*//' <<< "$*")
                if [[ "$*" =~ -x ]]; then
                    local absVal=$(( $(tmux::exe display-message -p "#{window_width}") * $perVal / 100 ))
                elif [[ "$*" =~ -y ]]; then
                    local absVal=$(( $(tmux::exe display-message -p "#{window_height}") * $perVal / 100 ))
                fi
                echo "tmux resize-pane $(sed "s/${perVal}%/${absVal}/" <<< "$*")"
                eval "tmux::exe resize-pane $(sed "s/${perVal}%/${absVal}/" <<< "$*")"
            else
                tmux::exe ${cmd} "$@"
            fi
            ;;

        rename-pane)
            tmux::_rename_pane "$@"
            ;;

        respawn)
            # From https://github.com/tmux/tmux/issues/1036
            pkill -USR1 tmux
            ;;

        restore-session)
            ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/plugins/tmux-resurrect/scripts/restore.sh
            ;;

        save-layout)
            eval $1=$(tmux::exe display-message -p "#{window_layout}")
            echo "Saved current layout to $1"
            ;;

        save-session)
            ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/plugins/tmux-resurrect/scripts/save.sh
            ;;

        select-layout|sl)
            if [[ "$1" =~ "work" ]]; then
                tmux::_select_layout_work "$1"
            else
                tmux::exe "${cmd}" "$@"
            fi
            ;;

        send-keys-all|ska)
            tmux::send_keys_all "$@"
            ;;

        send-keys-all-panes|skap)
            tmux::send_keys_all_panes "$@"
            ;;

        send-keys-other-panes|skop)
            tmux::send_keys_other_panes "$@"
            ;;

        sk)
            tmux::exe send-keys "$@"
            ;;

        update-env|ue)
            if (( $# > 0 )); then echo "Ignoring extra arguments: '$@'"; fi
            tmux::update_env
            ;;

        update-env-all|uea)
            tmuxw send-keys-all "tmuxw ue" C-m
            ;;

        update-env-all-panes|ueap)
            tmuxw send-keys-all-panes "tmuxw ue" C-m
            ;;

        ,*)
            tmux::exe ${cmd} "$@"
    esac
}
#+end_src

* tmux.conf
:PROPERTIES:
:header-args+: :tangle tmux.conf
:ID:       6753e99d-778e-452e-bb61-017101cf3c6e
:END:
#+begin_src conf :export none
  # This is a tangled file. Do not make any changes here. All changes should preferably be made in the original Org file.
  # Use =org-babel-tangle-jump-back-to-org= to jump back to it from any code block.
  # If any changes are made here, use =org-babel-detangle= to add it back to the original Org mode file.
#+end_src

[[https://linux.die.net/man/1/tmux][tmux man page]]
To show options:
- =tmux show-options -g [option_name]= Show global option/show all if none specified
- =tmux show-options -w [option_name]= Show window option/show all if none specified
- =tmux show-options -s [option_name]= Show server option/show all if none specified

** Main options
=C-b= is a pain to use when in copy mode as to scroll-up a full screen, we've to press =C-b= twice since upon the first press it's interpreted as a prefix.
Thus change it to =C-Space=. =C-a= is the default prefix used by screen but it collides with emacs readline
#+begin_src conf
  unbind C-b
  unbind C-Space
  unbind -T copy-mode 'C-Space'
  set -g prefix C-Space
  # For nested Tmux sessions
  # bind C-Space send-prefix
#+end_src

Disable wait for escape sequence to enable faster command sequence
#+begin_src conf
  set -sg escape-time 0
  set -sg repeat-time 600
#+end_src

Disable mouse support. I'd rather use mouse to scroll in vim
#+begin_src conf
  set -g mouse off
#+end_src

Set bash as the default shell
#+begin_src conf :tangle no
  set -g default-shell /tool/pandora64/bin/bash
#+end_src

vi-mode for copy-paste
#+begin_src conf
  setw -g mode-keys vi
#+end_src

Set the default terminal mode to 256color mode
#+begin_src conf
  set -g default-terminal "xterm-256color"
#+end_src

Sane scrolling (http://superuser.com/a/314620)
24-bit color support (https://www.reddit.com/r/emacs/comments/8ndm2x/gnu_emacs_261_24bit_colors_suckless_st_terminal/dzwh4vv/)
#+begin_src conf
  set -ga terminal-overrides ',xterm*:smcup@:rmcup@,*256col*:Tc'
#+end_src

#+begin_src conf
  set -g history-limit 10000
  setw -g alternate-screen on
#+end_src

To allow =FocusGained= and =FocusLost= autocmds to work in vim (https://github.com/tmux-plugins/vim-tmux-focus-events)
#+begin_src conf
  set -g focus-events on
#+end_src

** Status Bar configuration
#+begin_src conf
  set -g status on
#+end_src

Use emacs keybindings in tmux's command prompt. Emacs is the default but if I don't set this explicitly, it gets set to vi as my $VISUAL and $EDITOR are set to gvim and vim respectively.
#+begin_src conf
  set -g status-keys emacs
#+end_src

Left-justify the window list
#+begin_src conf
  set -g status-justify left
#+end_src

Colors!
#+begin_src conf
  set -g status-style fg=colour7,bg=colour18
  #set -g status-left-style fg=white,bg=colour25
  set -g message-style fg=colour7,bg=colour0,bright
#+end_src

Increase the time between refresh (Default=15)
#+begin_src conf
  set -g status-interval 60
#+end_src

On the left we have the Session information
#+begin_src conf
  set -g status-left-length 50
  set -g status-left ' #[fg=colour1,bold]#S#[fg=colour7] #[fg=colour20]•'
#+end_src

On the right I have information about running jobs, both local and on LSF and the clock
#+begin_src conf
  set -g status-right-length 60
  set -g status-right "#[fg=colour20]•#[fg=colour4] JOBS: #(command jobs -r 2>/dev/null | wc -l)r #(command jobs -s 2> /dev/null | wc -l)s #[fg=colour20]• #[fg=colour3]%b %d, %a %H:%M "
#+end_src

Enable activity alerts
#+begin_src conf
  setw -g monitor-activity on
  set  -g visual-activity on
#+end_src

Attempt to set the window title using the =\e]2;...\007= xterm code if the terminal appears to be an xterm
Since I'm using xterm in full-screen mode, I don't bother with the title anymore
#+begin_src conf :tangle no
  set -g set-titles on
  # set -g set-titles-string '#H #S'
#+end_src

** Pane configuration
Set the starting pane index to 1
#+begin_src conf
  setw -g pane-base-index 1
#+end_src

I'm making the active pane stand-out by changing its background color.
I don't really need a border for the active-pane so I'm setting it to the background color itself so that I get some space around the active pane.
Also, I set the border only for the inactive panes to provide visual separation when multiple inactive panes are adjacent to each other
#+begin_src conf
  set -g pane-active-border-style 'bg=colour18 fg=colour18'
  set -g pane-border-style 'bg=colour18 fg=colour18'
#+end_src

** Window configuration
Set the starting window index to 1
#+begin_src conf
  set -g base-index 1
#+end_src

Make active pane stand out. Colors as set by solarized theme
#+begin_src conf
  setw -g window-active-style 'bg=colour0'  # bg color of active pane
  setw -g window-style        'bg=colour18'  # bg color of inactive panes
#+end_src

Status Bar display
#+begin_src conf
  setw -g window-status-format "#[fg=colour20] #I:#W "
  setw -g window-status-style bright
  setw -g window-status-current-format "#[attr=bright]#[fg=colour5] #I:#W "
  setw -g window-status-current-style bright
#+end_src

Blink the pane tab in case of any activity
#+begin_src conf
  setw -g window-status-activity-style blink
#+end_src

Window is only constrained in size if a smaller client is actively looking at it
#+begin_src conf
  setw -g aggressive-resize on
#+end_src

** Bindings
Mostly, there's a method to the keybinding madness
- I use as many as vim's bindings as possible. Since I use evil in emacs I only end up having to learn one set of bindings that I can use everywhere
- Pane and Window bindings use similar suffix for related behavior eg. =h= to go to the 'left' one. I differentiate between them depending on the prefix. eg. Ctrl is used for panes while Ctrl+Shift is used for window bindings where applicable

=-r= indicates that the binding is repeatable i.e. the prefix need not be pressed again to use it

Reload tmux.conf
#+begin_src conf
  unbind r
  bind r   source-file ~/.config/tmux/tmux.conf \; refresh-client -S\; display-message " Config reloaded".
  unbind C-r
  bind C-r source-file ~/.config/tmux/tmux.conf \; refresh-client -S\; display-message " Config reloaded".
#+end_src

Remove suspend-client binding
#+begin_src conf
  unbind C-z
#+end_src

Allows fast scrolling through a pane's history. -e specifies that scrolling to the bottom exits copy-mode
#+begin_src conf
  bind PageUp copy-mode -eu
#+end_src

Copy-Paste
Use =prefix+]= to paste. =prefix+p= would be the logical choice for paste but it's better used in next/previous context
#+begin_src conf
  bind -T copy-mode-vi 'v'   send -X begin-selection
  bind -T copy-mode-vi 'V'   send -X select-line
  bind -T copy-mode-vi 'C-v' send -X rectangle-toggle
  bind -T copy-mode-vi 'y'   send -X copy-selection-and-cancel
  bind -T copy-mode-vi 'Y'   send -X copy-pipe-and-cancel
#+end_src

Use fzf to select and switch sessions. =prefix+s= is tmux's way of doing it (using =choose-tree=)
#+begin_src conf
  bind F switch-client -Tfzf-table
  bind -Tfzf-table s split-window -l 12 'bash -ci fzf-tmux-select-session > /dev/null'
#+end_src

*** FIXME COMMENT Mouse bindings
Make mouse more useful (from [[https://old.reddit.com/r/tmux/comments/cpvd02/can_i_pass_only_mousescroll_to_shell/ewtd5a3/][reddit]]). There's also [[https://github.com/NHDaly/tmux-better-mouse-mode][tmux-better-mouse-mode]] which I'm yet to try
On a wheelup event:
- if mouse is enabled, send the mouse event,
- else if we're in an alternate screen program, send the up key,
- else if pane is in copy mode, send the mouse event,
- else put the current pane into copy mode and send the mouse event.
(Nested ifs are not fun)

#+begin_src conf
  bind -n WheelUpPane if-shell -Ft= "#{mouse_any_flag}" "send-keys -M" "if-shell -Ft= '#{alternate_on}' 'send-keys -t= up' 'if-shell -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"select-pane -t=; copy-mode -e; send-keys -M\"'"
#+end_src

On a wheeldown event:
- if we're in an alternate screen program, send the down key,
- else, just send the mouse event

#+begin_src conf
  bind -n WheelDownPane if-shell -Ft= "#{alternate_on}" "send-keys -t= down" "select-pane -t= \; send-keys -M"
#+end_src

*** Pane bindings
I tried to use this as a repeatable binding (by using =-r=) but most of the time it hinders rather than helps.
I never use more than 2 panes vertically and/or horizontally so most of the time I'm just 1 prefix away.
Making this repeatable means that once I'm in my target pane tmux is still in repeatable binding mode so I've to explicitly press Escape to get out of it.
#+begin_src conf
  bind C-w last-pane
#+end_src

Use h-j-k-l instead of arrow keys
#+begin_src conf
  unbind Up
  unbind Down
  unbind Left
  unbind Right

  bind C-h select-pane -L
  bind C-j select-pane -D
  bind C-k select-pane -U
  bind C-l select-pane -R

  bind h select-pane -L
  bind j select-pane -D
  bind k select-pane -U
  bind l select-pane -R
#+end_src

Kill pane without confirmation
#+begin_src conf
  bind c   kill-pane
  bind C-o kill-pane -a
#+end_src

Create Panes. Use vim's bindings to create splits here. It's more intuitive
#+begin_src conf
  bind -r C-s split-window -v -c '#{pane_current_path}'
  bind -r C-v split-window -h -c '#{pane_current_path}'
#+end_src

Goto Pane
bind C-g display-panes
#+begin_src conf
  bind C-g display-panes
#+end_src

Resize Panes
#+begin_src conf
  bind -r M-Up    resize-pane -U 6
  bind -r M-Down  resize-pane -D 6
  bind -r M-Left  resize-pane -L 24
  bind -r M-Right resize-pane -R 24
#+end_src

Swap panes. These are the default bindings
#+begin_src conf :tangle no
  bind -r { swap-pane -U
  bind -r } swap-pane -D
#+end_src

**** FIXME Zoom vertically/horizontally
From https://github.com/tmux/tmux/issues/1868#issuecomment-520240204

#+begin_src conf :tangle no
bind -n M-z if -F '#{@layout_save}' \
    {run 'tmux select-layout "#{@layout_save}" \; set -up @layout_save'} \
    {set -Fp @layout_save "#{window_layout}" ; run 'tmux resizep -y "#{window_height}"'}
#+end_src

Instead of creating a bind, maybe expand tmux's =<prefix> >= menu

*** Window bindings

#+begin_src conf
  bind -r C-w last-window
#+end_src

#+begin_src conf
  bind -r H     previous-window
  bind -r C-S-h previous-window
  bind -r L     next-window
  bind -r C-S-l next-window
#+end_src

#+begin_src conf
  bind M-7 run-shell 'bash -ci "tmuxw select-layout work-lp"  > /dev/null'
  bind M-8 run-shell 'bash -ci "tmuxw select-layout work-pc"  > /dev/null'
  bind M-9 run-shell 'bash -ci "tmuxw select-layout work-max" > /dev/null'
#+end_src

#+begin_src conf
  bind -r N     new-window
  bind -r C-S-n new-window
#+end_src

Kill window without confirmation, kill other windows
#+begin_src conf
  bind C   kill-window
  bind C-o kill-window -a
#+end_src

#+begin_src conf :tangle no
  bind C-j command-prompt -p "Join pane to:"  "join-pane -t ':%%'"
#+end_src

** Tmux Plugins
#+begin_src conf
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
#+end_src

Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
#+begin_src conf
run '~/.config/tmux/plugins/tpm/tpm'
#+end_src

tmux-resurrect clobbers =C-s= and =C-r= bindings so I need to clobber its bindings!
Remmove after https://github.com/tmux-plugins/tmux-resurrect/issues/370 is resolved
#+begin_src conf
unbind C-r
bind C-r source-file ~/.config/tmux/tmux.conf \; refresh-client -S\; display-message " Config reloaded".

unbind C-s
bind -r C-s split-window -v -c '#{pane_current_path}'
#+end_src

* Local variables                                                                         :noexport:
:PROPERTIES:
:header-args: :tangle no :export none
:END:
Use =add-file-local-variable= or =add-file-local-variable-prop-line= instead of adding these manually

# [[https://www.reddit.com/r/emacs/comments/372nxd/how_to_move_init_to_orgbabel/crjicdv/][Auto-tangle on save]]

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# org-enforce-todo-checkbox-dependencies: nil
# org-enforce-todo-dependencies: nil
# org-refile-targets: ((nil :maxlevel . 9))
# End:
