#!/bin/bash -f
# Function to simplify using tmux

__tmux_exec() {                                                                                                    #{{{1
  # TODO: The only function that directly calls tmux. This allows me to inject any default options
  echo command tmux "$TMUX_DEFAULT_OPTS ${TMUX_DEFAULT_SOCKET:+-L $TMUX_DEFAULT_SOCKET} $@"
  command tmux "$TMUX_DEFAULT_OPTS ${TMUX_DEFAULT_SOCKET:+-L $TMUX_DEFAULT_SOCKET} $@"
}

__tmux_pp_attach_or_new() {                                                                                        #{{{1
  # Attach to existing session or else create a new one
  # Forcing the LANG to en_US.UTF-8 to avoid clobbering LANG=C set at work
  if [[ ! -z "$TMUX" ]]; then return; fi

  if [[ -z "$1" ]]; then
    LANG=en_US.UTF-8 tmux -2 attach-session || tmux -2 new-session
  else
    # The commented one-liner doesn't work when the supplied argument is a subset of an already existing session name
    # For eg. if we have a session called DebugBus, and we check if the session "Debug" exists, tmux returns true
    #tmux -2 attach-session -t "$@" || ( echo "Creating new session..." && tmux -2 new-session -s "$@" )

    if [[ $(tm ls | grep -P "^$1\b" 2> /dev/null) ]]; then
      #echo "Attaching to exising session..."
      LANG=en_US.UTF-8 tmux -2 attach-session -t "$@"
    else
      echo "Creating new session $1 ..."
      LANG=en_US.UTF-8 tmux -2 new-session -s "$1"
    fi
  fi
}


__tmux_pp_update_env() {                                                                                           #{{{1
  # Update environment variables in TMUX
  # https://raim.codingfarm.de/blog/2013/01/30/tmux-update-environment/
  echo "Updating to latest tmux environment...";

  local _line;
  while read _line; do
    if [[ $_line == -* ]]; then
      unset ${_line/#-/}
    else
      _line=${_line/=/=\"}
      _line=${_line/%/\"}
      eval export $_line;
    fi;
  done < <(tmux show-environment)

  echo "...done"
}


__tmux_pp_send_keys_other_panes() {                                                                                #{{{1
  local _pane_current=$(tmux display-message -p '#P')
  for _pane in $(tmux list-panes -F '#P'); do
    if (( "$_pane" != "$_pane_current" )); then
      tmux send-keys -t ${_pane} "$@"
    fi
  done
}


__tmux_pp_send_keys_all_panes() {                                                                                  #{{{1
  for _pane in $(tmux list-panes -F '#P'); do
    tmux send-keys -t ${_pane} "$@"
  done
}


__tmux_pp_send_keys_all() {                                                                                        #{{{1
  for _window in $(tmux list-windows -F '#I'); do
    for _pane in $(tmux list-panes -t ${_window} -F '#P'); do
      tmux send-keys -t ${_window}.${_pane} "$@"
    done
  done
}


__tmux_pp_select_layout_work() {                                                                                   #{{{1
  local num_panes=$(command tmux display-message -p "#{window_panes}")
  local win_width=$(command tmux display-message -p "#{window_width}")
  local win_width_by2=$(( $win_width / 2 ))
  local win_width_by4=$(( $win_width / 4 ))
  local win_height=$(command tmux display-message -p "#{window_height}")
  local win_height_by2=$(( $win_height / 2 ))

  local curr_pane=$(command tmux display-message -p "#{pane_index}")
  local curr_path=$(command tmux display-message -p "#{pane_current_path}")
  for (( i = $num_panes; i < 3; i++ )); do
    command tmux split-window -h -c "$curr_path"
  done

  if [[ "$1" == "work-max" ]]; then
    command tmux select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
    tmux_pp resize-pane -t 2 -x 100% > /dev/null
    tmux_pp resize-pane -t 1 -x 50% > /dev/null
  elif [[ "$1" == "work-home" ]]; then
    command tmux select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
    tmux_pp resize-pane -t 1 -x 25% > /dev/null
    tmux_pp resize-pane -t 2 -x 50% > /dev/null
  elif [[ "$1" == "work-pc" ]]; then
    command tmux select-layout "1be5,639x73,0,0{319x73,0,0,0,159x73,320,0,1,159x73,480,0,58}"
    tmux_pp resize-pane -t 1 -x 50% > /dev/null
    tmux_pp resize-pane -t 2 -x 25% > /dev/null
  elif [[ "$1" == "work-lp" ]]; then
    command tmux select-layout "96ed,319x66,0,0{159x66,0,0,0,159x66,160,0[159x32,160,0,1,159x33,160,33,90]}"
    tmux_pp resize-pane -t 1 -x 50% > /dev/null
    tmux_pp resize-pane -t 2 -y 50% > /dev/null
  fi

  command tmux select-pane -t $curr_pane
}
# }}}1


tmux_pp() {
  # We can't make the helper functions private because doing so will run tmux_pp in a subshell
  # However, since we can't export variables from a subshell to its parent shell, tmux_update_env won't work

  local cmd=$1; shift;

  case $cmd in
    attach-new|an)                                                                                                 #{{{1
      # if (( $(command tmux -V) < 2.3 )); then
      __tmux_pp_attach_or_new "$@"
      # else
      # command tmux new-session -A -s "$@"
      # fi
      ;;

    msg)                                                                                                           #{{{1
      command tmux display-message "$@"
      ;;

    update-env|ue)                                                                                                 #{{{1
      if (( $# > 0 )); then echo "Ignoring extra arguments: '$@'"; fi
      __tmux_pp_update_env
      ;;

    update-env-all-panes|ueap)                                                                                     #{{{1
      tmux_pp send-keys-all-panes "tmux_pp ue" C-m
      ;;

    update-env-all|uea)                                                                                            #{{{1
      tmux_pp send-keys-all "tmux_pp ue" C-m
      ;;

    resize-p*|resizep)                                                                                             #{{{1
      # From https://github.com/tmux/tmux/issues/888#issuecomment-297637138
      if [[ "$*" =~ -[xy][[:space:]]+[[:digit:]]+% ]]; then
        local perVal=$(sed -e 's/^.*-[xy]\s*//' -e 's/%.*//' <<< "$*")
        if [[ "$*" =~ -x ]]; then
          local absVal=$(( $(command tmux display-message -p "#{window_width}") * $perVal / 100 ))
        elif [[ "$*" =~ -y ]]; then
          local absVal=$(( $(command tmux display-message -p "#{window_height}") * $perVal / 100 ))
        fi
        echo "tmux resize-pane $(sed "s/${perVal}%/${absVal}/" <<< "$*")"
        eval "command tmux resize-pane $(sed "s/${perVal}%/${absVal}/" <<< "$*")"
      else
        command tmux ${cmd} "$@"
      fi
      ;;

    respawn)
      # From https://github.com/tmux/tmux/issues/1036
      pkill -USR1 tmux
      ;;

    save-layout)                                                                                                   #{{{1
      eval $1=$(command tmux display-message -p "#{window_layout}")
      echo "Saved current layout to $1"
      ;;

    select-layout|sl)                                                                                              #{{{1
      if [[ "$1" =~ "work" ]]; then
        __tmux_pp_select_layout_work "$1"
      else
        command tmux ${cmd} "$@"
      fi
      ;;

    sk)                                                                                                            #{{{1
      command tmux send-keys "$@"
      ;;

    send-keys-other-panes|skop)                                                                                    #{{{1
      __tmux_pp_send_keys_other_panes "$@"
      ;;

    send-keys-all-panes|skap)                                                                                      #{{{1
      __tmux_pp_send_keys_all_panes "$@"
      ;;

    send-keys-all|ska)                                                                                             #{{{1
      __tmux_pp_send_keys_all "$@"
      ;;
    #}}}1

    *)
      command tmux ${cmd} "$@"
  esac
}
