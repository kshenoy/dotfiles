#!/usr/bin/env bash

# Simple calc
unset -f =
=() {                                                                                                             # {{{1
  local _input="${@:-$(</dev/stdin)}"
  # echo $_input

  # if [[ $_input =~ [:xdigit:]+\[[:digit:]+:[:digit:]+\] ]]; then
  #   _input=${_input#.*[}
  #   echo $_input
  #   return
  # fi
  # = "($_input >> $_lsb) & ($_msb - $_lsb)"

  # If there's no explicit output formatting, try to infer from the input
  if [[ ! $_input =~ to_s ]]; then
    if [[ $_input =~ 0x ]] || [[ $_input =~ [a-fA-F] ]]; then
      local _base=16
    elif [[ $_input =~ 0b ]]; then
      local _base=2
    fi
    _input="(${_input}).to_s(${_base})"
  fi

  local _result=$(echo "$_input" | irb -m --noverbose | command sed 's/"//g')

  # Pretty-print formatted output
  if [[ $_input =~ 'to_s(16)' ]]; then
    _result="0x${_result}"
  elif [[ $_input =~ 'to_s(2)' ]]; then
    _result="0b${_result}"
  fi

  echo $_result
}

unset -f =base
=base() (                                                                                                         # {{{1
  _help () { #{{{
    echo 'SYNTAX:'
    echo '  =base NUM TO [FROM=10]'
    echo '  echo NUM | =base TO [FROM=10]'
    echo '  =base TO [FROM=10] <<< "NUM"'
  } # }}}

  if (( $# >= 3 )); then
    local _num=$1
    shift
  elif [[ -p /dev/stdin ]] || [[ -s /dev/stdin ]]; then
    # From pipe or from redirection respectively
    local _num=$(</dev/stdin)
  elif (( $# <= 1 )); then
    echo -e "ERROR: Insufficient arguments. At least two required\n"; _help
    return 1
  else
    local _num=$1
    shift
  fi

  local _ibase=${2:-10}
  local _obase=$1

  case $_ibase in
    2)
      _num=${_num#0[bB]}
      ;;
    16)
      _num=$(tr '[a-f]' '[A-F]' <<< "${_num#0[xX]}")
      ;;
  esac

  local _result=$(echo "obase=${_obase}; ibase=${_ibase}; $_num" | bc)
  case $_obase in
    2)
      _result="0b${_result}"
      ;;
    16)
      _result="0x${_result}"
      ;;
  esac

  echo $_result
)

=bin() { =base $1  2 ${2:-10}; }  # Convert to binary, by default from decimal
=dec() { =base $1 10 ${2:-16}; }  # Convert to decimal, by default from hexadecimal
=hex() { =base $1 16 ${2:-10}; }  # Convert to hexadecimal, by default from decimal

# BitSlice
unset -f =slice
=slice() (                                                                                                        # {{{1
  _help() { # {{{
    echo 'SYNTAX:'
    echo '  =slice NUM MSB LSB'
    echo '  =slice NUM BIT'
    echo '  echo NUM | =slice MSB LSB'
    echo '  =slice MSB LSB <<< "NUM"'
    echo
    echo "NOTE: MSB >= LSB"
  } # }}}

  if (( $# >= 3 )); then
    local _num=$1
    shift
  elif [[ -p /dev/stdin ]] || [[ -s /dev/stdin ]]; then
    # From pipe or from redirection respectively
    local _num=$(</dev/stdin)
  elif (( $# < 1 )); then
    echo -e "ERROR: Insufficient arguments. At least one more required\n"; _help
    return 1
  else
    local _num=$1
    shift
  fi

  local _msb=$1
  local _lsb=${2:-$_msb}

  if (( $_lsb > $_msb )); then
    echo -e "ERROR: MSB must be greater than or equal to LSB when slicing\n"; _help
    return 1
  fi

  # echo "in=$_num, msb=$_msb, lsb=$_lsb"
  = "($_num >> $_lsb) & ((1 << ($_msb - $_lsb + 1)) - 1)"
)
