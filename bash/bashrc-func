#!/usr/bin/env bash
# Description: Functions for BASH
echo "$(tput setaf 2)Sourcing$(tput sgr0) ${BASH_SOURCE[0]} ..."

#typeset -A lsfjobs

# BASH_SOURCE is an array variable whose members are the source filenames
# http://stackoverflow.com/a/12694189/734153
_src_dir=$(dirname ${BASH_SOURCE[0]})

# Misc utils                                                                                                        {{{1
for i in $_src_dir/utils/*; do
  # echo "Sourcing $i"
  . "$i"
done


# TMUX                                                                                                              {{{1
[[ -f $_src_dir/../tmux/tmux_scripts ]] && . $_src_dir/../tmux/tmux_scripts


# Human-readable du sorted by size                                                                                  {{{1
unset -f duh
# duh() {
#   depth="0"
#   dir="."
#   if (( $# > 0 )); then
#     depth=$1
#     shift
#   fi
#   if (( $# > 0 )); then
#     dir=$1
#     shift
#   fi

#   # Check to see if sort supports -h or not
#   echo "A" | sort -h &> /dev/null
#   if [[ $? ]]; then
#     # sort -h is not supported
#     command du -k --max-depth=$depth $dir | sort -n | while read size fname; do for unit in K M G T P E Z Y; do if [ $size -lt 1024 ]; then printf " %4d%sB\t  %s\n" ${size} ${unit} ${fname}; break; fi; size=$((size/1024)); done; done
#   else
#     # sort -h is supported
#     echo "du -kh --max-depth=$depth $dir 2> /dev/null | sort -h"
#     du -kh --max-depth=$depth $dir 2> /dev/null | sort -h
#   fi
# }
duh() { du -h "$@" | sort -rh; }

# Silent push and popd. Use dirs -v for vertical dirstack                                                           {{{1
pushd() { command pushd "$@" > /dev/null ; }
popd()  { command popd  "$@" > /dev/null ; }

# Function to create new dir(s) and enter it (last directory if multiple arguments are given)                       {{{1
unset -f mcd
mcd() {
  command mkdir -p "$@" || return
  cd -- "${@: -1}"
}


# Function to summarise the number of jobs running in LSF queue                                                     {{{1
#function cjobs(){
#  /usr/local/lsf/bin/bjobs >| /tmp/$$
#  lsfjobs[running]=`grep -c RUN /tmp/$$`
#  lsfjobs[pending]=`grep -c PEND /tmp/$$`
#  lsfjobs[total]=`grep -vc JOBID /tmp/$$`
#
#  return
#}


# @: Simpler/faster alternative to globstar                                                                         {{{1
unset -f @
function @ {
  # Description:
  # @ ls /some/long/path/**/that/I/dont/want/to/type is converted to
  #   ls $(find /some/long/path/ -path '*/that/I/dont/want/to/type')

  local _cmd=()
  for i in "$@"; do
    if [[ $i =~ '**' ]]; then
      _cmd+=('$(find'    $(command awk 'BEGIN {FS="**"} {print $1}' <<< "$i"))
      _cmd+=('-path' "'*"$(command awk 'BEGIN {FS="**"} {print $2}' <<< "$i")"')")
    else
      _cmd+=("$i")
    fi
  done
  # echo "${_cmd[@]}"
  # echo
  eval "${_cmd[@]}"
}


# Coloured man pages with less                                                                                      {{{1
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}


# Delete in background                                                                                              {{{1
unset -f rm_rf
rm_rf_silent() {

  # FIXME: Doesn't work if there are spaces in the filename
  for i in "$@"; do
    # Remove trailing slash and move to hidden
    ni=${i/%\//}
    bi=$(basename $ni)
    ni=${ni/%${bi}/.${bi}}

    #echo ${ni}.$$
    command mv $i ${ni}.$$
    command rm -rf ${ni}.$$ &
  done
}
alias rdj='rm_rf_silent'

# Delete all but...                                                                                                 {{{1
unset -f rm_but
rm_but() {
  # Delete all files except the specified ones.
  # All arguments are considered relative to the PWD even if any argument has an absolute path
  # This is because, for this function to work, two pieces of information are needed -
  #   1. a base workarea from which
  #   2. a list of files or folders will not be deleted
  # The arguments provide us with 2. However, this still leaves the issue of specifying the base workarea.
  #
  # Also, currently, only files and folders located in the PWD can be specified.
  # Those located in subfolders are not supported

  local _names=""
  for i in "$@"; do
    _names="$_names -name "'"'"$i"'" -o'
  done
  _names=${_names%" -o"}
  #echo $_names

  echo "find . -mindepth 1 -maxdepth 1 $_names -prune -o -print"
  find . -mindepth 1 -maxdepth 1 $_names -prune -o -print
}
alias rmb='rm_but'

# dos2unix/unix2dos                                                                                                 {{{1
unset -f dos2unix
dos2unix() {
  command sed -i -e 's/\r*$//' "$@"
}
unset -f unix2dos
unix2dos() {
  command sed -i -e 's/\r*$/\r/' "$@"
}


# base16 wrapper to set theme for shell+fzf etc. in one go
unset -f base16
base16() {
  if (( $# == 0 )); then
    return
  fi
  local _theme="$1"

  if [[ -n "$BASE16_SHELL" ]]; then
    _base16 "${BASE16_SHELL}/scripts/base16-${_theme}.sh" "$_theme"
  fi

  if [[ -n "$BASE16_FZF" ]]; then
    source "${BASE16_FZF}/bash/base16-${_theme}.config"
  fi
}
__base16_completions() {
  [[ -z "$BASE16_SHELL" ]] && return

  # Prevent completion if we've already picked something
  (( ${#COMP_WORDS[@]} != 2 )) && return

  local _themes=()
  for fname in ${BASE16_SHELL}/scripts/base16-*; do
    _themes+=($(sed 's/^base16-//' <<< "$(basename $fname .sh)"))
  done

  COMPREPLY+=($(compgen -W "${_themes[*]}" "${COMP_WORDS[1]}"))
}
complete -F __base16_completions base16

# Automatically add completion for all aliases to commands having completion functions                              {{{1
# Call this at the end
alias_completion() {
  local namespace="alias_completion"

  # parse function based completion definitions, where capture group 2 => function and 3 => trigger
  local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
  # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
  local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

  # create array of function completion triggers, keeping multi-word triggers together
  eval "local completions=($(complete -p | sed -ne "/$compl_regex/s//'\3'/p"))"
  (( ${#completions[@]} == 0 )) && return 0

  # create temporary file for wrapper functions and completions
  rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
  local tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}.tmp")" || return 1

  # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
  local line; while read line; do
    eval "local alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
    local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

    # skip aliases to pipes, boolan control structures and other command lists
    # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
    eval "local alias_arg_words=($alias_args)" 2>/dev/null || continue

    # skip alias if there is no completion function triggered by the aliased command
    [[ " ${completions[*]} " =~ " $alias_cmd " ]] || continue
    local new_completion="$(complete -p "$alias_cmd")"

    # create a wrapper inserting the alias arguments if any
    if [[ -n $alias_args ]]; then
        local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
        # avoid recursive call loops by ignoring our own functions
        if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
            local compl_wrapper="_${namespace}::${alias_name}"
                echo "function $compl_wrapper {
                    (( COMP_CWORD += ${#alias_arg_words[@]} ))
                    COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                    $compl_func
                }" >> "$tmp_file"
                new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
        fi
    fi

    # replace completion trigger by alias
    new_completion="${new_completion% *} $alias_name"
    echo "$new_completion" >> "$tmp_file"
  done < <(alias -p | sed -ne "s/$alias_regex/\1 '\2' '\3'/p")
  source "$tmp_file" && rm -f "$tmp_file"
};
