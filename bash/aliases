#!/usr/bin/env bash

#=======================================================================================================================
# Aliases v/s Functions
# A big limitation of aliases is that they are only expanded as the first argument,
# or after another alias with a trailing space on the end of the command.
#
# eg. let's say I have the following aliases set up
# alias g=grep
# alias vq='v -q <(!!)'
# Now, if I run 'g SOMETHING' followed by 'vq' then 'vq' doesn't run as expected because '!!' expands to 'g SOMETHING'.
# However, in the expanded form, 'g' doesn't get replaced with grep because of the afore-mentioned limitation.
#
# To avoid this, I use functions for my most commonly used aliases so that they work everywhere and,
# aliases only if I'm sure that they won't be used in the middle of a command.

echo "$(tput setaf 2)Sourcing$(tput sgr0) ${BASH_SOURCE[0]} ..."

# Identify the current shell
MYSHELL=$(basename $(ps h p $$ | awk '{ print $NF }' | sed 's/-//g'))


alias ls='ls -FLH --color=always'
alias l=ls
alias l1='ls -1'
alias ll='ls -lh'
alias la='ls -A'
alias lla='ll -A'
alias llt='ll -tr'
alias llS='ll -Sr'
alias ld='\ls -F | command grep "/"'


alias md='mkdir -p'
dirs() {
  if [[ "$*" =~ [-+][0-9]+ ]]; then
    # NOTE: The use of $* is deliberate here as it produces all the scripts arguments separated by the first character
    # of $IFS which, by default, is a space. This allows me to match all arguments against a regex in one go instead of
    # looping over them

    # Use long-listing format. Without this, the home directory is display as '~' preventing me from doing something
    # like `cp $(dirs +1)` as it results in an error: pushd: ~/.vim: No such file or directory
    builtin dirs "$@" -l
  elif (( $# == 0 )); then
    # Display index along with the path. This allows me to use pushd and popd more easily
    builtin dirs -v
  else
    builtin dirs "$@"
  fi
}


alias c=clear
alias cl="c;l"

alias d='diff'
alias ds='diff -y'
alias dt='meld'
alias td='tkdiff'

#alias echo '\echo -e'
#alias lock='/usr/local/bin/xlock'
alias be='bindkey -me'
alias bv='bindkey -v'
alias mv='mv -vi'
alias cp='cp -vi'
alias rm='rm -vi'
alias rd='rm -rvf'
alias ln='ln -svi'
alias df='df -h'
alias pppath='tr ":" "\n" <<< $PATH'
alias clnpath='export PATH=$(tr ":" "\n" <<< $PATH | perl -ne "print unless \$seen{\$_}++" | paste -s -d":")'

alias C=cat
alias P=$PAGER
alias H=head
alias T='tail -n 50'
alias hi=history
alias hh='hi | T'
alias xargs='xargs -t'
alias x=exit
alias k9='kill -9'


#=================
# Search related
if ! hash fd 2> /dev/null; then
  alias fn='find . -name'
  alias fdd='find . -type d -name'
fi

psgrep() {
  # From https://askubuntu.com/a/185746/38952
  # Using ww twice ensures that the output is not truncated to the width of the terminal
  ps wwup $(command pgrep -f "$@") 2> /dev/null
}

# Explicitly declaring this as a function as without it RHEL7 gets confused and errors out
function grep() { command grep -sP --color=always "$@"; }

# If rg/ag exists, use it!!
if hash rg 2> /dev/null; then
  # Custom types and settings are defined in RIPGREP_CONFIG_PATH=~/.ripgreprc
  # rgf is a wrapper around rg which provides a --files-from-option similar to ack
  alias g=rgf
elif hash ag 2> /dev/null; then
  g()     { command ag "$@"; }
  gtc()   { command ag --cpp "$@"; }
  gtch()  { command ag -G "\.(h,hpp,H,hh,hxx)$" "$@"; }
  gtcc()  { command ag -G "\.()$" "$@"; }
  gtsbs() { command ag -G "\.sbs$" "$@"; }
  gtsv()  { command ag -G "\.(sv|svh)$" "$@"; }
  gtv()   { command ag -G "\.(v|x)$" "$@"; }
else
  alias g=grep
fi
gi() { g -i "$@"; }
gv() { g -v "$@"; }


#=================
# Editor aliases
#
alias v=vim
vq() { vim -q <(eval "$(fc -nl -1) $@"); }

# Using -f keeps the window in the foreground and prevents a whole bunch of diffs opening at the same time
gvim_diff() {
  # DESCRIPTON: Opening up vimdiff takes some observable amount of time. This function opens it only if required.

  # If there are no differences, print that files are identical and return
  command diff -qs "$@" && return

  # At this point, diff can have non-zero error code because of actual differences or because it couldn't find the file.
  # To eliminate the 2nd case, check to see if all files are present. If not, return.
  # If any files are missing, the previous diff command will output the error.
  for i in "$@"; do
    if [[ ! -f "$i" ]]; then
      return
    fi
  done

  # Run vimdiff only if there are differences and all files are present
  gvim -df -c 'set nobackup' "$@"
}
alias vd=gvim_diff

# alias vi="vim -u NORC -U NORC -N --cmd 'set rtp="'$VIM,$VIMRUNTIME,$VIM/after'"'"
alias vi='vim --config NONE'
alias vkvb='$EDITOR ~/.vim/bundles.vim'
alias vkvm='$EDITOR ~/.vim/plugin/mappings.vim'
alias vkvv='$EDITOR ~/.vim/vimrc'

alias edbg="emacs --debug-init"
alias ed="~/bin/emacs_daemon"
emacs_func() { emacsclient --alternate-editor="" --no-wait --create-frame --quiet "$@" & }
alias e="emacs_func"


#==========
# Configs
alias vksa='$EDITOR ~/.config/dotfiles/bash/aliases'
alias vksc='$EDITOR ~/.bashrc'
alias vksf='$EDITOR ~/.config/dotfiles/bash/bashrc-func'
alias vksl='$EDITOR ~/.bashrc_local'
alias vksp='$EDITOR ~/.config/dotfiles/bash/bashrc-prompt'
alias vkt='$EDITOR ~/.config/dotfiles/tmux/tmux.conf'
alias vkx='$EDITOR ~/.Xresources'
alias sosa='. ~/.config/dotfiles/bash/aliases && . ~/.config/dotfiles/bash/bashrc-func'
alias sosc='. ~/.bashrc && clnpath'


#=======
# Misc
alias j='jobs -l'
alias isodate='date +%Y-%m-%d'
alias ,=jumper
alias que=query
alias pls='sudo $(history -p !!)'


#=======
# Perl
alias get_bits='perl -e '"'"'$a=hex($ARGV[0]);$m=$ARGV[1];$l=(defined $ARGV[2]?$ARGV[2]:$m); printf "0x%x\n", (($a >> $l) & ((1 << ($m-$l+1)) - 1))'"'"''


#======
# Git
alias ga='git add'
alias gA='git add -A .'
alias gh='git help'
alias gs='git status'


#=============
# Misc Tools
alias tmux='tmux_pp'
alias tm='tmux'
# alias tmi=tmuxinator
