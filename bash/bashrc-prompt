#!/bin/bash -f
#=======================================================================================================================
# Helper                                                                                                            {{{1
#=======================================================================================================================
# Foreground/Background Color Codes
  # 30/40 : black
  # 31/41 : red
  # 32/42 : green
  # 33/43 : yellow
  # 34/44 : blue
  # 35/45 : magenta
  # 36/46 : cyan
  # 37/47 : white
#
# Attribute Codes
  #  0 : Normal
  #  1 : Bold
  #  2 : Normal
  #  3 : Italics*
  #  4 : Underline
  #  5 : Blink
  #  6 : Outline
  #  7 : Reverse FG and BG Colors
  #  8 : Invisible (FG color is made same as BG)
  #  9 : Strike-out*
  # 22 : Bold Off
  # 23 : Italics Off
  # 24 : Underline Off
  # 25 : Blink Off
  # 27 : Reverse Off
  # 29 : Strike-out Off
#
# Always use tput to generate these codes.
echo "$(tput setaf 2)Sourcing$(tput sgr0) ${BASH_SOURCE[0]} ..."

# This should always point to whatever prompt is desired.
PROMPT_COMMAND=_setprompt_sjlmod_


#=======================================================================================================================
# Mod of Phil's ZSH Prompt                                                                                          {{{1
#=======================================================================================================================
_setprompt_philmod_() {
  ###
  # Need this so the prompt will work.
  #setopt PROMPT_SUBST


  ###
  # See if we can use colors.
  autoload colors zsh/terminfo
  if [[ "$terminfo[colors]" -ge 8 ]]; then
      colors
  fi
  blink=$'\e[5m'
  blink_off=$'\e[25m'
    normal="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"      # Enter extended character input mode
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"     # Exit extended character input mode
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}


    ###
    # Decide if we need to set titlebar text.
    case $TERM in
    xterm*)
      PR_TITLEBAR=$'%{\e]0;%n@%m: %~\a%}'
      ;;
    *)
      PR_TITLEBAR=''
      ;;
    esac


    ###
    # Finally, the prompt.
    PROMPT='$PR_SET_CHARSET${(e)PR_TITLEBAR}\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_ULCORNER$PR_SHIFT_OUT\
%{$fg_bold[black]%}(%{$fg_no_bold[green]%}%h%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
%{$fg_bold[black]%}(%{%(?.$fg_bold[green].$fg_bold[red])%}%$PR_PWDLEN<...<${modPWD}%<<%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN${(e)PR_FILLBAR}$PR_URCORNER$PR_SHIFT_OUT\

$PR_SHIFT_IN$PR_LLCORNER$PR_HBAR$PR_SHIFT_OUT\
%(?.%{$fg_bold[green]%}(^_^%).%{$fg_bold[red]%}(>_<%)) \
%{%(!.$fg_bold[red].$fg_bold[white])%}%#$normal '

    RPROMPT=' %{$fg_bold[black]%}(%{$fg_no_bold[yellow]%}%D{%H:%M %b %d, %a}%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_LRCORNER$PR_SHIFT_OUT$normal'

    PS2='%{$fg_no_bold[white]%}%_ >$normal '
}



#=======================================================================================================================
# Misc Prompts                                                                                                      {{{1
#=======================================================================================================================
_setprompt_misc_() {
  setopt PROMPT_SUBST
  autoload colors zsh/terminfo
  if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
  fi

  blink=$'\e[5m'
  blink_off=$'\e[25m'
  normal="%{$terminfo[sgr0]%}"

  # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  #PS1="\`if [ \$? = 0 ]; then echo \[\e[32m\]^_^\[\e[0m\]; else echo \[\e[31m\]@_@\[\e[0m\]; fi\`[!\!] \W/$ "
  #PS1="[\!] \W/$ "
  #PS1="\[\e[0;33m\][!\!]\`if [[ \$? = "0" ]]; then echo "\\[\\e[32m\\]"; else echo "\\[\\e[31m\\]"; fi\` \`if [[ `pwd|wc -c` -gt 18 ]]; then echo "\\W"; else echo "\\w"; fi\`/\$\[\e[0m\] "
  #PS1="\[\e[0;33m\][!\!]\[\e[0m\] \`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w \n^_^\[\e[0m\]'; else echo '\[\e[1;31m\]\w\n@_@\[\e[0m\]'; fi\` $ "
  #PS1="\[\e[1;30m\](\[\e[0;33m\]!\!\[\e[1;30m\])-(\`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w\[\e[1;30m\])\n\[\e[1;32m\]^_^'; else echo '\[\e[1;31m\]\w\[\e[1;30m\])\n\[\e[1;31m\]@_@'; fi\` \[\e[1;30m\]$ \[\e[0m\]"
  # PS1="\n\[\e[0;37m\](\[\e[0;33m\]!\!\[\e[0;37m\])-(\`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w\[\e[0;37m\])\n(\[\e[1;32m\]^_^\[\e[0;37m\])'; else echo '\[\e[1;31m\]\w\[\e[0;37m\])\n(\[\e[1;31m\]@_@\[\e[0;37m\])'; fi\` \[\e[0;37m\]$ \[\e[0m\]"
  #PS1="${bg_red_fg_white_blink}%(t.DING!.)%(30t.DONG!.)${att_normal}${fg_dgray}[${fg_brown}%h${fg_dgray}]-(%(?.${fg_lgreen}.${fg_lred})%~${fg_dgray})${fg_lgray}%# ${att_normal}"
  #PS1="[%(t.${blink}%{${bg[red]}${fg_no_bold[white]}%}DING!${normal}.%(30t.${blink}%{${bg[red]}${fg_no_bold[white]}%}DONG!${normal}.%{$fg_bold[yellow]%}%D{%H:%M}))${normal}] "
  #PS1='[%h]-($modPWD)$ '
  # RPS1=" [%h]"
}


#=======================================================================================================================
# Mod of SJL's prompt                                                                                               {{{1
#=======================================================================================================================
#
#  SJL's Prompt
#  Credit for ideas/info: Phil!'s ZSH Prompt, Bashish, TERMWIDE prompt
#                         Bash Prompt Howto
#                         http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
#
# Example:
# ┌ kshenoy @ svvgar-nx16 in ~/.vim ───────────────────── 03:57pm Aug 02, Fri
# └ (^_^) ➤
#
##### code ####
## Use bash builtin checkwinsize option for terminals which fail to properly
## set the $COLUMNS variable. (bug workaround)
shopt -s checkwinsize

## This function is run at every prompt update, keeping our variables updated.
## Bash's PROMPT_COMMAND option handles this (see end of this function).
_setprompt_sjlmod_() {

  # This has to be placed first
  local _exit_status="$?"

  # We use this instead of $COLUMNS as when a shell is starting, the $COLUMNS variable is not set
  local columns=$(tput cols)

  # Colors
  # NOTE: Non-printable sequences should be enclosed in \[ and \] else it'll cause long commands to not wrap correctly
  local _reset="\[$(tput sgr0)\]"
  local _bold="\[$(tput bold)\]"
  local _fg_black="\[$(tput setaf 0)\]"
  local _fg_light_black="\[$(tput setaf 8)\]"
  local _fg_red="\[$(tput setaf 1)\]"
  local _fg_yellow="\[$(tput setaf 3)\]"
  local _fg_green="\[$(tput setaf 2)\]"
  local _fg_blue="\[$(tput setaf 4)\]"
  local _fg_purple="\[$(tput setaf 5)\]"

  # Set line graphics
  local _dash="─"
  local _ulcorner="┌"
  # local _ulcorner="╭"
  local _llcorner="└"
  # local _llcorner="╰"

  # If root user then colour the arrow red.
  if (( "${UID}" == 0 )); then
    local _fg_user_symbol=${_fg_red}
  else
    local _fg_user_symbol=${_bold}${_fg_light_black}
  fi

  # The info variables
  local _pwd=$(_get_compact_pwd_)

  #for k in "${!dir_alias[@]}"; do
    #echo "$k => ${dir_alias[$k]}"
    #echo ${_pwd/#$k/${dir_alias[$k]}}
  #done
  #for i in ${!dir_alias[@]}; do
  #  [ -n "$i" ] && _pwd=${_pwd/#$i/${dir_alias[$i]}}
  #done

  # Force time to US Mountain Time (we do this here as well as in .bashrc as sourcing some env files overwrites this)
  local _time="$(TZ=US/Mountain date +%I:%M%P) "
  local _user="$(whoami) "
  local _user_host_sep="@ "
  local _pwd_sep="in "
  local _host="$(hostname) "

  # VCS specific
  local _vcs_type=$(vcs__get_type)
  local _vcs_branch=$(vcs__get_branch ${_vcs_type})
  local _vcs_sep=" on "

  if [[ $_vcs_type == "git" ]]; then
    local _user_symbol=" ±"
  elif [[ $_vcs_type == "hg" ]]; then
    local _user_symbol=" ☿"
  elif [[ $_vcs_type == "p4" ]]; then
    local _vcs_sep=" on "
  else
    #local _user_symbol=" ○"
    #local _user_symbol=" ➤"
    local _user_symbol=" $"
    local _vcs_sep=""
  fi

  # Set length of info
  _info="${_ulcorner} ${_user}${_user_host_sep}${_host}${_pwd_sep}${_pwd}${_vcs_sep}${_vcs_branch} ${_time}"

  # If info is wider than the screen, drop the time
  if (( $columns < ${#_info} )); then
    _time=""
    _info="${_ulcorner} ${_user}${_user_host_sep}${_host}${_pwd_sep}${_pwd}${_vcs_sep}${_vcs_branch} "
  fi
  _pwd_sep="${_fg_light_black}${_pwd_sep}${_reset}"

  # If the info still can't fit, drop user and domain info
  if (( $columns < ${#_info} )); then
    _user=""
    _user_host_sep=""
    _host=""
    _pwd_sep=""
    _info="${_ulcorner} ${_pwd}${_vcs_sep}${_vcs_branch} "
  fi

  # If the info still can't fit, drop vcs branch
  if (( $columns < ${#_info} )); then
    _vcs_sep=""
    _vcs_branch=""
    _info="${_ulcorner} ${_pwd} "
  fi

  # If the info still can't fit, truncate PWD
  if (( $columns < ${#_info} )); then
    _pwd_sep="..."
    while (( $columns < ${#_info} )); do
      _pwd=`echo $_pwd | sed 's|^/\?[^/]*/||'`
      _info="${_ulcorner} ${_pwd_sep}${_pwd} "
    done
    _pwd_sep="${_bold}${_fg_green}${_pwd_sep}${_reset}"
  fi

  local _fillsize=$(( $columns - ${#_info} - 1 ))
  local _fill=$(printf "${_dash}%.0s" $(seq 1 $_fillsize))" "

  # Colorize vcs:
  if [[ $_vcs_type == "git" ]]; then
    local _vcs_status=$(vcs__get_status ${_vcs_type} ${_vcs_branch})
    if [[ "${_vcs_status}" == "staged" ]]; then
      _vcs_branch="${_fg_yellow}${_vcs_branch}${_reset}"
    elif [[ "${_vcs_status}" == "modified" ]]; then
      _vcs_branch="${_fg_red}${_vcs_branch}${_reset}"
    elif [[ "${_vcs_status}" == "committed" ]]; then
      _vcs_branch="${_bold}${_fg_green}${_vcs_branch}${_reset}"
    fi
  elif [[ $_vcs_type == "p4" ]]; then
    _vcs_branch="${_fg_blue}${_vcs_branch}${_reset}"
  fi

  # Create exit status indicator based on exit status of last command
  if (( "$_exit_status" == 0 )); then
    _exit_status="${_bold}${_fg_green} (^_^)"
  else
    _exit_status="${_fg_red} (@_@)"
  fi

  PS1="\n${_reset}"
  PS1+="${_fg_light_black}${_ulcorner}${_reset} "
  PS1+="${_fg_red}${_user}${_reset}"
  PS1+="${_fg_light_black}${_user_host_sep}${_reset}"
  PS1+="${_fg_yellow}${_host}${_reset}"
  PS1+="${_pwd_sep}"
  PS1+="${_bold}${_fg_green}${_pwd}${_reset}"
  PS1+="${_fg_light_black}${_vcs_sep}${_reset}"
  PS1+="${_vcs_branch} "
  PS1+="${_fg_light_black}${_fill}${_reset}"
  PS1+="${_fg_yellow}${_time}${_reset}"
  PS1+="\n"
  PS1+="${_fg_light_black}${_llcorner}${_reset}"
  PS1+="${_exit_status}${_reset}"
  PS1+="${_fg_user_symbol}${_user_symbol}${_reset} "

  PS2="      ${_fg_user_symbol}...${_reset}   "

  # Evaluate dynamic variables only if dyn_vars is defined (Not required for prompt)
  declare -F dyn_vars &> /dev/null && dyn_vars

  # Putting this here to keep the HISTFILE current when sessions span multiple days
  # FIXME: Find a better way to do this i.e. do it once a day instead of everytime the prompt is refreshed
  HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/bash_history/$(date +%Y/%m/%d)_${HOSTNAME%%.*}_${USER}_$$"
  [[ -d $(dirname ${HISTFILE}) ]] || mkdir -p $(dirname ${HISTFILE})
  # Write to the history file immediately instead of waiting till the end of the session
  history -a
}


#=======================================================================================================================
# Helper functions                                                                                                  {{{1
#=======================================================================================================================
unset -f _get_compact_pwd_
_get_compact_pwd_() {                                                                                             # {{{2
  # Contract the following:
  #   /proj/ch_func_dev{1:0}/ASPEN_HIGHLANDS -> ~AH{1:0}
  # Contract more if it's my directory
  local _pwd=${PWD}
  if [[ -n "$HOME" ]] && [[ "$_pwd" =~ ^"$HOME" ]]; then
    _pwd=${_pwd/#$HOME/\~};
  else
    _pwd="$(sed -re 's/ASPEN_HIGHLANDS/AH/i' -e 's/ASPEN/AS/i' -e 's/BRECKENRIDGE/BR/i' -e 's/NV_EL3/NV/i' <<< "$_pwd")"
    _proj_regex='(AS|AH|BR|DG|EL|NV)'
    _proj_lcase_regex=$(tr [A-Z] [a-z] <<< "$_proj_regex")

    if [[ "$_pwd" =~ ^/proj/ch_(legacy_)?func_gen_scratch ]]; then
      _pwd="$(sed -re "s:^/proj/ch_(legacy_)?func_gen_scratch([0-9])/(${_proj_regex})/:~\3\2_Scratch/:" <<< "$_pwd")"
    elif [[ "$_pwd" =~ ^/proj/ch_(legacy_)?func_dev ]]; then
      _pwd="$(sed -re "s:^/proj/ch_(legacy_)?func_dev([0-9])/(${_proj_regex})/:~\3\2/:" <<< "$_pwd")"
      _pwd="$(sed -re "s:^(~${_proj_regex}[0-9])/\w+/${_proj_lcase_regex}[0-9]:\1:" <<< "$_pwd")"
    fi
  fi
  echo $_pwd
}
