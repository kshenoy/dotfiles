Doom emacs private configuration

* Configuring Doom
Running =doom sync= is not required after modifying this file!

Some additional functions/macros to help configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press =K= (non-evil users must press =C-c c k=). This will open documentation for it, including demos of how they are used.

Also, =gd= (or =C-c c d=) will jump to their definition and see how they are implemented.

* General
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
  (setq user-full-name "Kartik Shenoy")
#+end_src

** Better defaults
#+begin_src emacs-lisp
    (setq-default confirm-kill-emacs 'y-or-n-p  ; Confirm before quitting
  )
#+end_src

This determines the style of line numbers in effect. If set to
- `nil': line numbers are disabled.
- `'relative - relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

- `doom-font'
- `doom-variable-pitch-font'
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src emacs-lisp :tangle no
  (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
        doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

** Themes
There are two ways to load a theme. Both assume the theme is installed and available.
You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+begin_src emacs-lisp
  (setq doom-theme 'doom-one)
#+end_src
** Keybindings
TODO

* Org

Startup options
#+begin_src emacs-lisp
(setq org-startup-align-all-tables t
      org-startup-folded t
      org-startup-with-inline-images t)
#+end_src

Prettify
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)  ; Hide markers for bold/italics etc.
#+end_src

#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes"
      org-default-notes-file (expand-file-name "Inbox.org" org-directory))
#+end_src

** ToDo related
FIXME: Custom keywords
#+begin_src emacs-lisp :tangle no
(setq org-todo-keywords '((sequence "TODO(t!)" "WAITING(w@/!)" "|" "DONE(d@/!)" "DEFER(f@/!)" "CANCEL(c@)")))
#+end_src

=@=   - Log timestamp and note
=!=   - Log timestamp only
=x/y= - =x= takes affect when entering the state and
      =y= takes affect when exiting if the state being entered doesn't have any logging
Refer [[http://orgmode.org/manual/Tracking-TODO-state-changes.html][Tracking-TODO-state-changes]] for details

Add logging when task state changes
#+begin_src emacs-lisp
  (setq org-log-redeadline 'note
        org-log-into-drawer t  ; Save state changes into LOGBOOK drawer instead of in the body
        org-treat-insert-todo-heading-as-state-change t
        org-enforce-todo-dependencies t)  ; Prevent parent task from being marked complete till all child TODOS are marked as complete
#+end_src

Change from any todo state to any other state using =C-c C-t KEY=, provided selection keys have been defined
#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection 'auto)
#+end_src

This frees up S-left and S-right which I can then use to cycles through the todo states but skip setting timestamps and entering notes which is very convenient when all I want to do is change the status of an entry without changing its timestamps
#+begin_src emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

FIXME: Need to figure out what's the difference between this and the hl-todo package
#+begin_src emacs-lisp :tangle no
(setq org-todo-key  word-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("WAIT" :foreground "orange" :weight bold)
              ("DONE" :foreground "forest green" bold)
              ("CANCEL" :foreground "forest green" bold))))
#+end_src
** Source blocks
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Easy templates for org-version >= 9.2. =C-c C-,= was also added in 9.2 and provides a menu to select an easy-template
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-structure-template-alist '("sc" . "src c++"))
  (add-to-list 'org-structure-template-alist '("sl" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sp" . "src python"))
  (add-to-list 'org-structure-template-alist '("ss" . "src bash")))
#+end_src
